// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: clients/solution.proto

package clients

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Solution_SaveFile_FullMethodName = "/solution.Solution/SaveFile"
	Solution_Download_FullMethodName = "/solution.Solution/Download"
)

// SolutionClient is the client API for Solution service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SolutionClient interface {
	// Save user's file.
	SaveFile(ctx context.Context, opts ...grpc.CallOption) (Solution_SaveFileClient, error)
	// Download dataset
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Solution_DownloadClient, error)
}

type solutionClient struct {
	cc grpc.ClientConnInterface
}

func NewSolutionClient(cc grpc.ClientConnInterface) SolutionClient {
	return &solutionClient{cc}
}

func (c *solutionClient) SaveFile(ctx context.Context, opts ...grpc.CallOption) (Solution_SaveFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Solution_ServiceDesc.Streams[0], Solution_SaveFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &solutionSaveFileClient{stream}
	return x, nil
}

type Solution_SaveFileClient interface {
	Send(*FileUploadRequest) error
	CloseAndRecv() (*FileUploadResponse, error)
	grpc.ClientStream
}

type solutionSaveFileClient struct {
	grpc.ClientStream
}

func (x *solutionSaveFileClient) Send(m *FileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *solutionSaveFileClient) CloseAndRecv() (*FileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *solutionClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Solution_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Solution_ServiceDesc.Streams[1], Solution_Download_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &solutionDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Solution_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type solutionDownloadClient struct {
	grpc.ClientStream
}

func (x *solutionDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SolutionServer is the server API for Solution service.
// All implementations must embed UnimplementedSolutionServer
// for forward compatibility
type SolutionServer interface {
	// Save user's file.
	SaveFile(Solution_SaveFileServer) error
	// Download dataset
	Download(*DownloadRequest, Solution_DownloadServer) error
	mustEmbedUnimplementedSolutionServer()
}

// UnimplementedSolutionServer must be embedded to have forward compatible implementations.
type UnimplementedSolutionServer struct {
}

func (UnimplementedSolutionServer) SaveFile(Solution_SaveFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveFile not implemented")
}
func (UnimplementedSolutionServer) Download(*DownloadRequest, Solution_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedSolutionServer) mustEmbedUnimplementedSolutionServer() {}

// UnsafeSolutionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolutionServer will
// result in compilation errors.
type UnsafeSolutionServer interface {
	mustEmbedUnimplementedSolutionServer()
}

func RegisterSolutionServer(s grpc.ServiceRegistrar, srv SolutionServer) {
	s.RegisterService(&Solution_ServiceDesc, srv)
}

func _Solution_SaveFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SolutionServer).SaveFile(&solutionSaveFileServer{stream})
}

type Solution_SaveFileServer interface {
	SendAndClose(*FileUploadResponse) error
	Recv() (*FileUploadRequest, error)
	grpc.ServerStream
}

type solutionSaveFileServer struct {
	grpc.ServerStream
}

func (x *solutionSaveFileServer) SendAndClose(m *FileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *solutionSaveFileServer) Recv() (*FileUploadRequest, error) {
	m := new(FileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Solution_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SolutionServer).Download(m, &solutionDownloadServer{stream})
}

type Solution_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type solutionDownloadServer struct {
	grpc.ServerStream
}

func (x *solutionDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Solution_ServiceDesc is the grpc.ServiceDesc for Solution service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Solution_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "solution.Solution",
	HandlerType: (*SolutionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SaveFile",
			Handler:       _Solution_SaveFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _Solution_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "clients/solution.proto",
}
